importScripts("https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js");const LOG_LEVEL={NONE:0,ERROR:1,WARN:2,INFO:3,DEBUG:4},isDevelopment="localhost"===self.location.hostname||"127.0.0.1"===self.location.hostname,CURRENT_LOG_LEVEL=isDevelopment?LOG_LEVEL.INFO:LOG_LEVEL.WARN;function log(e,t,...a){if(e<=CURRENT_LOG_LEVEL)switch(e){case LOG_LEVEL.ERROR:console.error(`[SW] ${t}`,...a);break;case LOG_LEVEL.WARN:console.warn(`[SW] ${t}`,...a);break;case LOG_LEVEL.INFO:console.info(`[SW] ${t}`,...a);break;case LOG_LEVEL.DEBUG:console.log(`[SW] ${t}`,...a)}}const CACHE_NAME="StoryApp-v1",API_CACHE_NAME="StoryApp-API-v1",IMAGE_CACHE_NAME="StoryApp-Images-v1",urlsToCache=["/","/index.html","/app.bundle.js","/favicon.png","/manifest.json","/images/default-story.jpg"];async function preCacheCommonMapTiles(){try{const e=await caches.open(IMAGE_CACHE_NAME),t=["https://a.tile.openstreetmap.org/10/511/256.png","https://b.tile.openstreetmap.org/10/511/256.png","https://c.tile.openstreetmap.org/10/511/256.png","https://a.tile.openstreetmap.org/11/1022/512.png","https://b.tile.openstreetmap.org/11/1022/512.png","https://c.tile.openstreetmap.org/11/1022/512.png","https://a.tile.openstreetmap.org/12/2044/1024.png","https://b.tile.openstreetmap.org/12/2044/1024.png","https://c.tile.openstreetmap.org/12/2044/1024.png"];let a=0;const n=t.map((async t=>{try{const n=await fetch(t);if(n.ok){const o=n.clone();await e.put(t,o),a++}}catch(e){log(LOG_LEVEL.WARN,"Failed to pre-cache map tile:",t,e)}}));await Promise.allSettled(n),log(LOG_LEVEL.INFO,`Map tiles pre-caching completed: ${a}/${t.length} tiles cached`)}catch(e){log(LOG_LEVEL.WARN,"Failed to pre-cache map tiles:",e)}}async function handleNavigationRequest(e,t=!1){const a=await caches.open(CACHE_NAME);try{const t=await a.match(e);if(t)return log(LOG_LEVEL.INFO,"Navigation served from cache:",e.url),t;const n=await fetch(e);if(n.ok){const t=n.clone();return await a.put(e,t),log(LOG_LEVEL.INFO,"Navigation cached for offline use:",e.url),n}throw new Error("Navigation fetch failed")}catch(e){log(LOG_LEVEL.WARN,"Navigation request failed, serving offline page:",e);return await a.match("/")||new Response('\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Offline - Story App</title>\n          <meta charset="utf-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1">\n          <style>\n            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }\n            .offline-message { color: #666; margin: 20px 0; }\n            .retry-btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }\n          </style>\n        </head>\n        <body>\n          <h1>ðŸ“± You\'re Offline</h1>\n          <div class="offline-message">\n            <p>Please check your internet connection and try again.</p>\n            <p>Some features may be available offline if you\'ve used them before.</p>\n          </div>\n          <button class="retry-btn" onclick="window.location.reload()">Retry</button>\n        </body>\n      </html>\n    ',{status:200,headers:{"Content-Type":"text/html"}})}}async function handleAssetRequest(e){const t=await caches.open(CACHE_NAME);try{const a=await t.match(e);if(a)return log(LOG_LEVEL.INFO,"Asset served from cache:",e.url),a;const n=await fetch(e);if(n.ok){const a=n.clone();return await t.put(e,a),log(LOG_LEVEL.INFO,"Asset cached for offline use:",e.url),n}throw new Error("Asset fetch failed")}catch(t){if(log(LOG_LEVEL.WARN,"Asset request failed:",e.url,t),"script"===e.destination)return new Response('console.log("Asset not available offline");',{headers:{"Content-Type":"application/javascript"}});if("style"===e.destination)return new Response("/* Styles not available offline */",{headers:{"Content-Type":"text/css"}});throw t}}async function handleAuthRequest(e,t=!1){try{const t={method:e.method,headers:e.headers,body:e.body,mode:"cors",credentials:"same-origin"},a=await fetch(e,t);if(log(LOG_LEVEL.DEBUG,`Auth response status: ${a.status}, type: ${a.type}, url: ${a.url}`),a.ok)return a;try{const e=await a.json();return log(LOG_LEVEL.WARN,"Auth request failed with error:",e),a}catch(e){throw log(LOG_LEVEL.WARN,"Failed to parse error response as JSON:",e),new Error(`Network response was not ok: ${a.status}`)}}catch(e){return log(LOG_LEVEL.ERROR,"Auth request failed:",e),new Response(JSON.stringify({error:"No internet connection",message:"Please check your connection and try again. Authentication requires internet connection.",isPWA:t,timestamp:(new Date).toISOString()}),{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"application/json","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}})}}async function handleApiRequest(e){const t=await caches.open(API_CACHE_NAME),a=await t.match(e),n=fetch(e).then((async a=>{if(a.ok){const n=a.clone();if(await t.put(e,n),e.url.includes("/stories")&&!e.url.includes("/stories/"))try{const e=a.clone(),t=await e.json();t.listStory&&t.listStory.length>0&&await cacheStoryImages(t.listStory)}catch(e){log(LOG_LEVEL.WARN,"Failed to cache story images:",e)}}return a})).catch((()=>null));if(a)return a;return await n||new Response(JSON.stringify({error:"No internet connection",message:"Please check your connection and try again"}),{status:503,headers:{"Content-Type":"application/json"}})}async function cacheStoryImages(e){const t=await caches.open(IMAGE_CACHE_NAME);let a=0,n=0;const o=e.filter((e=>e.photoUrl&&e.photoUrl.startsWith("https://"))).map((async e=>{try{const o=await fetch(e.photoUrl);if(503===o.status)return void n++;if(o.ok){const n=o.clone();await t.put(e.photoUrl,n),a++}}catch(t){log(LOG_LEVEL.WARN,"Failed to pre-cache story image:",e.photoUrl,t)}}));await Promise.allSettled(o),log(LOG_LEVEL.INFO,`Story images pre-caching completed: ${a} cached, ${n} skipped (503)`)}async function handleStoryImageRequest(e){const t=await caches.open(IMAGE_CACHE_NAME),a=(new URL(e.url),await t.match(e));if(a)return log(LOG_LEVEL.INFO,"Story image served from cache:",e.url),a;try{const a=await fetch(e);if(503===a.status){log(LOG_LEVEL.WARN,`Service unavailable (503) for story image: ${e.url}, using default image`);return await t.match("/images/default-story.jpg")||createPlaceholderImage()}if(a.ok){const n=a.clone();return await t.put(e,n),log(LOG_LEVEL.INFO,"Story image cached for offline use:",e.url),a}throw new Error(`Story image fetch failed with status: ${a.status}`)}catch(a){log(LOG_LEVEL.WARN,"Failed to fetch story image:",e.url,a);const n=await t.match("/images/default-story.jpg");return n?(log(LOG_LEVEL.INFO,"Using default image as fallback for:",e.url),n):(log(LOG_LEVEL.INFO,"Using placeholder image for:",e.url),createPlaceholderImage())}}async function handleMapTileRequest(e){const t=await caches.open(IMAGE_CACHE_NAME),a=await t.match(e);if(a)return log(LOG_LEVEL.INFO,"Map tile served from cache:",e.url),a;try{const a=await fetch(e);if(a.ok){const n=a.clone();return await t.put(e,n),log(LOG_LEVEL.INFO,"Map tile cached:",e.url),a}throw new Error("Map tile fetch failed")}catch(t){return log(LOG_LEVEL.WARN,"Failed to fetch map tile:",e.url,t),new Response("",{status:404,statusText:"Not Found",headers:{"Content-Type":"image/png"}})}}function createPlaceholderImage(){return new Response('\n    <svg xmlns="http://www.w3.org/2000/svg" width="300" height="200" viewBox="0 0 300 200">\n      <rect width="300" height="200" fill="#f5f5f5"/>\n      <text x="150" y="100" font-family="Arial, sans-serif" font-size="16" fill="#999" text-anchor="middle" dy=".3em">\n        Image Unavailable\n      </text>\n    </svg>\n  ',{headers:{"Content-Type":"image/svg+xml","Cache-Control":"public, max-age=31536000"}})}async function isImageCached(e){try{const t=await caches.open(IMAGE_CACHE_NAME);return void 0!==await t.match(e)}catch(e){return log(LOG_LEVEL.WARN,"Error checking image cache:",e),!1}}async function cacheImageWithRetry(e,t=2){let a=0;for(;a<=t;)try{const t=await fetch(e);if(503===t.status)return log(LOG_LEVEL.WARN,`Service unavailable (503) for image: ${e}, skipping cache`),!1;if(t.ok){const a=await caches.open(IMAGE_CACHE_NAME),n=t.clone();return await a.put(e,n),log(LOG_LEVEL.INFO,"Successfully cached image:",e),!0}throw new Error(`Image fetch failed with status: ${t.status}`)}catch(n){a++,log(LOG_LEVEL.WARN,`Failed to cache image (attempt ${a}/${t+1}):`,e,n),a<=t&&await new Promise((e=>setTimeout(e,1e3*a)))}return!1}async function handleImageRequest(e){const t=await caches.open(IMAGE_CACHE_NAME),a=new URL(e.url),n=await t.match(e);if(n)return a.hostname.includes("story-api.dicoding.dev")&&log(LOG_LEVEL.INFO,"Story image served from cache:",e.url),n;let o=0;for(;o<=1;)try{const n=await fetch(e);if(503===n.status){log(LOG_LEVEL.WARN,`Service unavailable (503) for image: ${e.url}, using default image`);return await t.match("/images/default-story.jpg")||createPlaceholderImage()}if(n.ok){const o=n.clone();return await t.put(e,o),a.hostname.includes("story-api.dicoding.dev")&&log(LOG_LEVEL.INFO,"Story image cached for offline use:",e.url),n}throw new Error(`Image fetch failed with status: ${n.status}`)}catch(t){if(o++,a.hostname.includes("story-api.dicoding.dev")&&log(LOG_LEVEL.WARN,`Failed to fetch story image (attempt ${o}/2):`,e.url,t),o>1)break;await new Promise((e=>setTimeout(e,1e3*o)))}const i=await t.match("/images/default-story.jpg");return i?(log(LOG_LEVEL.INFO,"Using default image as fallback for:",e.url),i):(log(LOG_LEVEL.INFO,"Using placeholder image for:",e.url),createPlaceholderImage())}async function handleOtherRequest(e){try{const t=await fetch(e);if(t.ok)return t;throw new Error("Network response was not ok")}catch(t){const a=await caches.open(CACHE_NAME),n=await a.match(e);if(n)return log(LOG_LEVEL.INFO,"Serving cached response for:",e.url),n;const o=new URL(e.url),i=e.headers.get("accept")?.includes("text/html");if(i||"/"===o.pathname||"/index.html"===o.pathname){return await a.match("/")||new Response('\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Offline - Story App</title>\n            <meta charset="utf-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1">\n            <style>\n              body { \n                font-family: Arial, sans-serif; \n                text-align: center; \n                padding: 50px; \n                background: #f5f5f5;\n                margin: 0;\n              }\n              .offline-container {\n                background: white;\n                border-radius: 10px;\n                padding: 40px;\n                box-shadow: 0 4px 20px rgba(0,0,0,0.1);\n                max-width: 500px;\n                margin: 0 auto;\n              }\n              .offline-icon { font-size: 48px; margin-bottom: 20px; }\n              .offline-title { color: #333; margin-bottom: 20px; }\n              .offline-message { color: #666; margin: 20px 0; line-height: 1.6; }\n              .retry-btn { \n                background: #007bff; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 5px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s;\n              }\n              .retry-btn:hover { background: #0056b3; }\n            </style>\n          </head>\n          <body>\n            <div class="offline-container">\n              <div class="offline-icon">ðŸ“±</div>\n              <h1 class="offline-title">You\'re Offline</h1>\n              <div class="offline-message">\n                <p>Please check your internet connection and try again.</p>\n                <p>Some features may be available offline if you\'ve used them before.</p>\n              </div>\n              <button class="retry-btn" onclick="window.location.reload()">Retry Connection</button>\n            </div>\n          </body>\n        </html>\n      ',{status:200,headers:{"Content-Type":"text/html"}})}return new Response(JSON.stringify({error:"No internet connection",message:"Please check your connection and try again.",offline:!0,timestamp:(new Date).toISOString()}),{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"application/json"}})}}async function cleanupOldStoryImages(){try{const e=await caches.open(IMAGE_CACHE_NAME),t=await e.keys(),a=t.filter((e=>e.url.includes("story-api.dicoding.dev"))),n=t.filter((e=>e.url.includes("tile.openstreetmap.org"))),o=100;if(a.length>o){const t=a.slice(0,a.length-o);await Promise.all(t.map((t=>e.delete(t)))),log(LOG_LEVEL.INFO,`Cleaned up ${t.length} old story images`)}const i=200;if(n.length>i){const t=n.slice(0,n.length-i);await Promise.all(t.map((t=>e.delete(t)))),log(LOG_LEVEL.INFO,`Cleaned up ${t.length} old map tiles`)}}catch(e){log(LOG_LEVEL.WARN,"Failed to cleanup old images:",e)}}async function getCacheStats(){try{const e=await caches.open(IMAGE_CACHE_NAME),t=await e.keys(),a=t.filter((e=>e.url.includes("story-api.dicoding.dev"))).length,n=t.filter((e=>e.url.includes("tile.openstreetmap.org"))).length,o=t.filter((e=>!e.url.includes("story-api.dicoding.dev")&&!e.url.includes("tile.openstreetmap.org"))).length;return log(LOG_LEVEL.INFO,"Cache Statistics:",{totalImages:t.length,storyImages:a,mapTiles:n,otherImages:o}),{storyImages:a,mapTiles:n,otherImages:o,total:t.length}}catch(e){return log(LOG_LEVEL.WARN,"Failed to get cache stats:",e),{storyImages:0,mapTiles:0,otherImages:0,total:0}}}self.addEventListener("install",(e=>{log(LOG_LEVEL.INFO,"Service Worker installing..."),e.waitUntil(caches.open(CACHE_NAME).then((e=>(log(LOG_LEVEL.INFO,"Opened cache"),e.addAll(urlsToCache).catch((e=>(log(LOG_LEVEL.WARN,"Some resources failed to cache:",e),Promise.resolve())))))).then((()=>preCacheCommonMapTiles())).then((()=>(log(LOG_LEVEL.INFO,"Service Worker installed successfully"),self.skipWaiting()))))})),self.addEventListener("fetch",(e=>{const{request:t}=e,a=new URL(t.url);if("chrome-extension:"===a.protocol||"moz-extension:"===a.protocol||"ms-browser-extension:"===a.protocol||!a.hostname.includes("localhost")&&!a.hostname.includes("story-api.dicoding.dev"))return;const n=self.matchMedia("(display-mode: standalone)").matches||self.matchMedia("(display-mode: window-controls-overlay)").matches||self.matchMedia("(display-mode: minimal-ui)").matches;return"navigate"===t.mode?(log(LOG_LEVEL.DEBUG,"Handling navigation request:",t.url),void e.respondWith(handleNavigationRequest(t,n))):a.pathname.includes("/login")||a.pathname.includes("/register")?(log(LOG_LEVEL.DEBUG,`Handling auth request (${n?"PWA":"browser"}):`,t.url),void e.respondWith(handleAuthRequest(t,n))):a.pathname.includes("/stories")&&"https://story-api.dicoding.dev"===a.origin?(log(LOG_LEVEL.DEBUG,"Handling API request:",t.url),void e.respondWith(handleApiRequest(t))):a.hostname.includes("story-api.dicoding.dev")&&a.pathname.includes("/images/stories/")?(log(LOG_LEVEL.DEBUG,"Handling story image request:",t.url),void e.respondWith(handleStoryImageRequest(t))):a.hostname.includes("tile.openstreetmap.org")?(log(LOG_LEVEL.DEBUG,"Handling map tile request:",t.url),void e.respondWith(handleMapTileRequest(t))):"image"===t.destination?(log(LOG_LEVEL.DEBUG,"Handling general image request:",t.url),void e.respondWith(handleImageRequest(t))):"script"===t.destination||"style"===t.destination?(log(LOG_LEVEL.DEBUG,"Handling asset request:",t.url),void e.respondWith(handleAssetRequest(t))):(log(LOG_LEVEL.DEBUG,"Handling other request:",t.url),void e.respondWith(handleOtherRequest(t)))})),self.addEventListener("activate",(e=>{log(LOG_LEVEL.INFO,"Service Worker activating..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==CACHE_NAME&&e!==API_CACHE_NAME&&e!==IMAGE_CACHE_NAME)return log(LOG_LEVEL.INFO,"Deleting old cache:",e),caches.delete(e)}))))).then((()=>cleanupOldStoryImages())).then((()=>getCacheStats())).then((e=>(log(LOG_LEVEL.INFO,"Service Worker activated successfully"),log(LOG_LEVEL.INFO,"Current cache statistics:",e),self.clients.claim()))))})),self.addEventListener("push",(e=>{let t={body:"New story has been added!",icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",vibrate:[100,50,100],data:{dateOfArrival:Date.now(),primaryKey:1},actions:[{action:"explore",title:"View Story",icon:"/icons/icon-72x72.png"},{action:"close",title:"Close",icon:"/icons/icon-72x72.png"}]};if(e.data)try{const a=e.data.json();a.title&&(t.title=a.title),a.body&&(t.body=a.body),a.icon&&(t.icon=a.icon),a.data&&(t.data={...t.data,...a.data})}catch(e){log(LOG_LEVEL.WARN,"Failed to parse push data:",e)}e.waitUntil(self.registration.showNotification("Story App",t))})),self.addEventListener("notificationclick",(e=>{if(e.notification.close(),"explore"===e.action)e.waitUntil(clients.openWindow("/"));else{if("close"===e.action)return;e.waitUntil(clients.openWindow("/"))}})),self.addEventListener("notificationclose",(e=>{log(LOG_LEVEL.INFO,"Notification closed:",e.notification.tag)}));